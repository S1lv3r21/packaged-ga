name: Run pytest, bump version and make a release

description: "Release Package workflow to install dependencies, run tests, and check code quality."
inputs:
  PKG: # try to get this from the user's toml file?
    description: "Name of the package being packaged"
    required: true

runs:
  using: "composite"
  steps:
  - name: Update
    run: sudo apt-get update -qq
    shell: bash
    
  - name: Install Tree
    run: sudo apt-get install tree -qq
    shell: bash

  - name: Verify Python
    run: python3 --version
    shell: bash

  - name: Find Python files
    run: find . -wholename "*.py"
    shell: bash
### TESTING ###
  - name: Print Line for readability
    run: echo -e "\033[1;32m============================== TESTING ===============================\033[0m"
    shell: bash
    
  - name: Install dependencies
    run: |
      python3 -m pip install pdm twine -qq
      python3 -m pdm --version
      python3 -m pdm install --dev --quiet
    shell: bash

  - name: Run pytest
    run: python3 -m pdm run pytest tests
    shell: bash

  - name: Collect pytest coverage
    run: python3 -m pdm run pytest --cov="${{ inputs.PKG }}" --cov-report term-missing --cov-report html tests
    shell: bash
    
### GITHUB TAGS ###    
  - name: Print Line for readability
    run: echo -e "\033[1;32m========================= FETCH TAGS AND CHECK NEW RELEASE IS REQUIRED ==========================\033[0m"
    shell: bash

  - name: Fetch all tags 
    run: git fetch --tags
    shell: bash

  - name: Check if new release is required
    run: python3 ./packaged-ga/.github/actions/release-package/check_new_version.py
    shell: bash

### DEV ##### 
  - name: Print Line for readability
    run: echo -e "\033[1;32m============================== UPDATE DEV BRANCH ===============================\033[0m"
    shell: bash
    
  - name: Continue with existing version
    if: env.result == 0 && github.ref == 'refs/heads/dev'
    run: |
        echo "Current version: v$VERSION"
    shell: bash

  - name: Bump to new version and create Pull Request
    if: env.result == 128 && github.ref == 'refs/heads/dev'
    run: |
      echo "Creating a new release v$VERSION"
      git config --global user.name 'github-actions'
      git config --global user.email 'github-actions@github.com'
      python3 -m pdm run tbump $VERSION --non-interactive 
    #   gh pr create --title "New Release v$VERSION" --body "This pull request was created by Github Actions." --base main
    # env:
    #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    shell: bash

#### MAIN ######
  - name: Print Line for readability
    run: echo -e "\033[1;32m============================== BUILD PACKAGE/DOC AND MAKE RELEASE ===============================\033[0m"
    shell: bash
    
  - name: Build package
    if: github.ref == 'refs/heads/main'
    run: python3 -m pdm build --no-sdist
    shell: bash

  - name: Build documentation
    if: github.ref == 'refs/heads/main'
    run: |
      python3 -m pdm install --dev
      python3 -m pdm run sphinx-build . _html
      # python3 -m pdm run python3 -m zipfile -c "dist/${{ inputs.PKG }}-$VERSION.doc.zip" _html/*
    shell: bash

  # - name: Upload to Test Pypi
  #   if: github.ref == 'refs/heads/main'
  #   run: twine upload --repository-url https://test.pypi.org/legacy/ dist/*
  #   env:
  #     TWINE_USERNAME: __token__
  #     TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
